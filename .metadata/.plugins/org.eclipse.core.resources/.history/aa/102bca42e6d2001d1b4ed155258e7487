package Recipe_Management;

import java.util.*;

class Tool{
	private boolean Oven;
	private boolean Stove;
	private boolean Pan;
	
	public Tool() {
		this(false, false, false);
	}
	public Tool(boolean oven, boolean stove, boolean pan) {
		this.Oven=oven;
		this.Stove=stove;
		this.Pan=pan;
	}
	
	
	public void setOven(boolean b) {
		this.Oven = b;
	}
	public void setStove(boolean b) {
		this.Stove = b;
	}
	public void setPan(boolean b) {
		this.Pan = b;
	}
	public boolean getOven() {
		return this.Oven;
	}
	public boolean getStove() {
		return this.Stove;
	}
	public boolean getPan() {
		return this.Pan;
	}
	
}

class Ingredient{
	private String ingre;
	private int quantity;
	private String unit;
	
	public Ingredient() {
		// TODO Auto-generated constructor stub
	}
	public Ingredient(String ingre, int quantity, String unit) {
		this.ingre = ingre;
		this.quantity = quantity;
		this.unit = unit;
	}
	
	public void setIngredient(String ingre, int quantity, String unit) {
		this.ingre = ingre;
		this.quantity = quantity;
		this.unit = unit;
	}
	public String getIngre() {
		return this.ingre;
	}
	public int getQuantity() {
		return this.quantity;
	}
	public String getUnit() {
		return this.unit;
	}
}

public class Recipe {
	private String fName;
	ArrayList<String> toolsArr = new ArrayList<>();
	ArrayList<String> recipeStep = new ArrayList<>();
	HashSet<Ingredient> ingreSet=new HashSet<>();
	
	public void setFName(String name) {
		this.fName=name;
	}
	public String getFName() {
		return this.fName;
	}
	
	public boolean addSteps(String explain) {
		return recipeStep.add(explain);
	}
	
	public void printSteps() {
		System.out.println("arrList2.size(): "+recipeStep.size());
		int i = 0;
		for(String str:recipeStep) {
			System.out.println((i++) +"@"+str);
		}
	}
	
	public void addIngredients(Ingredient ingre) {
		ingreSet.add(ingre);
	}
	public void printIngredients() {
		System.out.println("ingreSet.size(): "+ingreSet.size());
		Iterator<Ingredient> it=ingreSet.iterator();
		while(it.hasNext()) {
			Ingredient ing = it.next();
			System.out.println(ing.getIngre()+" : "+ing.getQuantity()+ing.getUnit());
		}
	}

	public void addTools(String tool) {
		toolsArr.add(tool);
	}
	public ArrayList<String> getTools() {
		return toolsArr;
	}
	
	
	public void input_menu() {
		System.out.println("----------------------------");
		System.out.println(" 1. 도구 추가");
		System.out.println(" 2. 재료 추가");
		System.out.println(" 3. 조리단계 추가");
		System.out.println(" 9. 종  료");
		System.out.println("----------------------------");
		System.out.println(" 메뉴 번호를 선택하세요 =>");
		System.out.println("----------------------------");
	}
	
	Scanner sc = new Scanner(System.in);
	public void input() {
		System.out.print("음식이름 : ");
		setFName(sc.nextLine());
		while(true) {
			this.input_menu();
			int num = sc.nextInt();
			sc.skip("\n");
			if(num==9) {
				System.out.println("~~레시피 입력 종료~~");
				break;
			}
			if(num<1||num>4) {
				System.out.println("메뉴에 없는 번호에요. 다시 입력하세요.");
				continue;
			}
			switch (num) {
			case 1: //도구 추가
				System.out.print("도구 추가 : ");
				addTools(sc.nextLine());
				break;
			case 2: //재료 추가
				System.out.print("재료 추가 : ");
				String iName = sc.nextLine();
				System.out.print("재료양(정수) : ");
				int iQuantity = sc.nextInt();
				sc.skip("\n");
				System.out.print("재료 단위 : ");
				String iUnit = sc.nextLine();
				addIngredients(new Ingredient(iName, iQuantity, iUnit));
				break;
			case 3: //조리 단계 추가
				System.out.print("조리단계 추가 : ");
				addSteps(sc.nextLine());
				break;
			}
		}
	}
	
	public String RecipeToString() {
		String rts = "----"+fName+"----\n";
		rts += "[필요도구]\n";
		Iterator<String> it = toolsArr.iterator();
		rts += it.next();
		while(it.hasNext()) {
			String s = it.next();
			rts += ", "+it.next();
		}
		rts += "\n[재료]\n";
		for(Ingredient ing:ingreSet) {
			rts += ing.getIngre()+": "+ing.getQuantity()+" "
					+ing.getUnit()+"\n";
		}
		rts += "\n[조리 단계]\n";
		int i = 1;
		for(String str:recipeStep) {
			rts += i+". "+str+"\n";
		}
		return rts;
	}
	
	public boolean compareRecipe(String str) {
		return str.equals(fName);
	}

}
